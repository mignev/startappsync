#!/usr/bin/env python
"""Usage:
    startappsync [options]

Options:
  -h --help                  show this help message and exit
  --repo REPOPATH            the path that will watch
  --from FROMPATH            the path that will watch
  --to SSH_URL               ssh url to sync with
  --set-remote REMOTENAME    ssh url to sync with
  --version                  show version and exit

"""

import sys, os, time
sys.path.insert(0, os.path.dirname(os.getcwd()))
sys.path.insert(0, os.path.dirname(os.getcwd()) + '/startappsync')

from git.exc import NoSuchPathError, InvalidGitRepositoryError

from startappsync import App, StatappSyncHandler, version, rsync
from watchdog.observers import Observer
from docopt import docopt
from termcolor import colored, cprint

def print_error(message):
    cprint(message, 'red')

def print_success(message):
    cprint(message, 'green')

def set_remote_to_git_config(remote_name):
    if app.set_remote(remote_name):
        print_success("Remote with name '{0}' was successfuly added!".format(remote_name))
        sys.exit(0)
    else:
        print_error("Error: There is something shitty with this remote!")
        sys.exit(1)

if __name__ == '__main__':
    arguments = docopt(__doc__, version=version)

    use_app = True
    startappsync_test_env = os.getenv("STARTAPPSYNC_TEST_ENV", None)
    startappsync_test_cwd = os.getenv("STARTAPPSYNC_TEST_CWD", None)

    if arguments['--from'] == None and arguments['--repo'] == None:
        current_working_dir = os.getcwd()

        """
            FIXME: This is used by tests. I don't like this solution
            I have to fix it!
        """
        if startappsync_test_env and startappsync_test_cwd:
            src = startappsync_test_cwd
        else:
            src = current_working_dir

    if arguments['--repo'] != None:
        src = arguments['--repo']

    if arguments['--from'] and arguments['--to']:
        use_app = False
        src = arguments['--from']
        dest = arguments['--to']


    if use_app:
        try:
            app = App(repo=src)

            if app.has_repo():
                # Let check if this repo has an app?
                if app.is_app():
                    src = app.src()
                    dest = app.dest()
                else:
                    remote_name = arguments['--set-remote']
                    if remote_name != None:
                        set_remote_to_git_config(remote_name)

                    print_error("\nSorry Dude :( ... But I can't find StartApp App in the git config!\n")
                    if app.has_remotes():
                        print("I fond these StartApp repos:\n")
                        remotes = app.remotes()
                        for remote in remotes:
                            print("{0} - {1}".format(remote.name, remote.url))

                        print("\nIf you want to use some of them you have to type:")
                        print("---")
                        print("startappsync --set-remote <remote-name>")
                        print("--- or if you are using '--repo' argument ---")
                        print("startappsync --repo <repo/path> --set-remote <remote-name>")
                        print("---\n")

                    sys.exit(1)
            else:
                print_error("Uuuups ... I can't find StartApp Git repo here!")
                print("If tyou want to see the usage please type this:\n")
                print(" startappsync --help\n")
                sys.exit(1)

        except InvalidGitRepositoryError:
            print_error("\nUuuups ... there isn't git repo here :(")
            sys.exit(1)
        except NoSuchPathError:
            print_error("Uuuups ... the directory you are looking for is not exist! :(")
            sys.exit(1)

    src = os.path.abspath(src)
    src = "{0}/".format(src)

    print_success("Hi Dude! I am StartAppSync :)")
    print_success("Now I am looking for changes in '{0}' and ... \nI will sync them to '{1}'" \
        .format(src, dest))

    if not startappsync_test_env:
        rsync(src, dest)
        event_handler = StatappSyncHandler(src=src, dest=dest)
        observer = Observer()
        observer.schedule(event_handler, src, recursive=True)
        observer.start()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()
